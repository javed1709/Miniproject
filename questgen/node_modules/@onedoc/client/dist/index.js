var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  HtmlBuilder: () => HtmlBuilder,
  Onedoc: () => Onedoc
});
module.exports = __toCommonJS(src_exports);

// src/htmlBuilder.ts
var HtmlBuilder = class {
  title;
  start = `<!DOCTYPE html>
                             <html  lang="en">
                                <head>
                                    <meta charset = "UTF-8">
                                    <meta name="viewport" content="width=device-width">`;
  middle = `
                                </head>
                                <body>`;
  end = `</body>
                        </html>`;
  constructor(title) {
    this.title = title;
  }
  build(document, styleSheets) {
    if (styleSheets) {
      styleSheets.forEach((path) => {
        this.start += `<link rel = "stylesheet" href=${path} />`;
      });
    }
    if (this.title) {
      this.start += `<title>${this.title}</title>`;
    }
    this.middle += document;
    return this.start + this.middle + this.end;
  }
};

// src/client.ts
var import_mime_types = __toESM(require("mime-types"));
var Onedoc = class {
  apiKey;
  endpoint;
  constructor(apiKey, endpoint = "https://api.fileforge.com") {
    this.apiKey = apiKey;
    this.endpoint = endpoint;
  }
  buildUrl(path) {
    return `${this.endpoint}${path}`;
  }
  async render(document) {
    const assets = document.assets ?? [];
    assets.push({ path: "/index.html", content: document.html });
    const test = document.test ?? true;
    const save = document.save ?? false;
    const expires_in = document.expiresIn ?? 1;
    const expires_at = new Date(
      Date.now() + expires_in * 24 * 60 * 60 * 1e3
    );
    const expires_at_iso = expires_at.toISOString();
    const formData = new FormData();
    const optionsBlob = new Blob(
      [
        JSON.stringify({
          test,
          host: save,
          expiresAt: expires_at_iso,
          fileName: document.title ?? "document"
        })
      ],
      { type: "application/json" }
    );
    formData.append("options", optionsBlob);
    assets.forEach((asset) => {
      if (asset.path === "/index.html" && asset.content) {
        const htmlBuilder = new HtmlBuilder(document.title);
        const styleSheets = assets.filter((a) => a.path.endsWith(".css")).map((a) => a.path);
        const html = htmlBuilder.build(document.html, styleSheets);
        const fileBlob = new Blob([html], { type: "text/html" });
        formData.append("files", fileBlob, "index.html");
      } else if (asset.content) {
        const assetType = import_mime_types.default.lookup(asset.path) || "application/octet-stream";
        const fileBlob = new Blob([asset.content], { type: assetType });
        formData.append("files", fileBlob, asset.path);
      }
    });
    const response = await fetch(
      await this.buildUrl("/pdf/generate"),
      {
        method: "POST",
        headers: {
          "x-api-key": this.apiKey
        },
        body: formData
      }
    );
    if (response.status === 201) {
      if (!save) {
        return {
          file: await response.arrayBuffer(),
          link: null,
          error: null,
          info: {}
        };
      } else {
        const jsonResponse = await response.json();
        return { file: null, link: jsonResponse.url, error: null, info: {} };
      }
    } else {
      const error = await response.json();
      return { file: null, link: null, error, info: {} };
    }
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  HtmlBuilder,
  Onedoc
});
//# sourceMappingURL=index.js.map