{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SHAIK JAVED\\\\OneDrive\\\\Desktop\\\\Miniproject\\\\questgen\\\\src\\\\components\\\\UploadPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './upload.css';\n\n// Function to strip Markdown formatting and convert to plain text\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst stripMarkdown = markdown => {\n  return markdown.replace(/(\\*\\*|__)(.*?)\\1/g, '$2') // Bold\n  .replace(/(\\*|_)(.*?)\\1/g, '$2') // Italic\n  .replace(/~~(.*?)~~/g, '$1') // Strikethrough\n  .replace(/!\\[[^\\]]*\\]\\([^)]*\\)/g, '') // Remove images\n  .replace(/\\[[^\\]]*\\]\\([^)]*\\)/g, '') // Remove links\n  .replace(/^\\s*#\\s*(.*)$/gm, '$1') // Remove headings\n  .replace(/^\\s*>\\s*(.*)$/gm, '$1') // Remove blockquotes\n  .replace(/`([^`]*)`/g, '$1') // Inline code\n  .replace(/^\\s*[-+*]\\s+/gm, '') // Remove unordered list bullets\n  .replace(/^\\s*\\d+\\.\\s+/gm, '') // Remove ordered list numbers\n  .replace(/\\n{2,}/g, '\\n') // Remove extra line breaks\n  .trim(); // Trim any extra spaces\n};\nconst UploadPage = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [extractedData, setExtractedData] = useState('');\n  const [questions, setQuestions] = useState([]);\n  const [queryText, setQueryText] = useState('');\n  const [rawText, setRawText] = useState('');\n  const handleFileChange = e => {\n    setFile(e.target.files[0]);\n  };\n  const handleUpload = async () => {\n    if (!file) return;\n    setLoading(true);\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('queryText', queryText);\n    try {\n      const response = await axios.post('http://localhost:3322/upload', formData);\n      setExtractedData(response.data.extractedData);\n\n      // Convert Markdown to plain text and split into an array\n      const plainText = stripMarkdown(response.data.questions);\n      const questionsArray = plainText.split('\\n').filter(line => line.trim() !== ''); // Filter out any empty lines\n      setQuestions(questionsArray); // Store as an array of strings\n    } catch (error) {\n      console.error('Error uploading file:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleQuery = async () => {\n    if (!rawText) return;\n    setLoading(true);\n    try {\n      const response = await axios.post('http://localhost:3322/query', {\n        rawText,\n        queryText\n      });\n      setExtractedData(rawText); // Set rawText as extractedData\n\n      // Convert Markdown to plain text and split into an array\n      const plainText = stripMarkdown(response.data.queryResult);\n      const questionsArray = plainText.split('\\n').filter(line => line.trim() !== ''); // Filter out any empty lines\n      setQuestions(questionsArray); // Store as an array of strings\n    } catch (error) {\n      console.error('Error querying text:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleQueryTextChange = e => {\n    setQueryText(e.target.value);\n  };\n  const handleRawTextChange = e => {\n    setRawText(e.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"upload-page-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload-form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange,\n        className: \"upload-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpload,\n        className: \"upload-button\",\n        disabled: loading,\n        children: loading ? 'Uploading...' : 'Upload'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: queryText,\n        onChange: handleQueryTextChange,\n        placeholder: \"Enter prompt for Gemini AI\",\n        className: \"upload-query-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: rawText,\n        onChange: handleRawTextChange,\n        placeholder: \"Enter raw text to query\",\n        className: \"upload-raw-text-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleQuery,\n        className: \"upload-button\",\n        disabled: loading,\n        children: loading ? 'Querying...' : 'Get Query'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload-preview-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-generated-results\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Extracted Data:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: extractedData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Generated Questions:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: questions.map((question, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: question\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 29\n          }, this) // Display each question as a list item\n          )\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n};\n_s(UploadPage, \"oLu9Km0K8E0VNGB8w3MbC7/dJ3w=\");\n_c = UploadPage;\nexport default UploadPage;\nvar _c;\n$RefreshReg$(_c, \"UploadPage\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","stripMarkdown","markdown","replace","trim","UploadPage","_s","file","setFile","loading","setLoading","extractedData","setExtractedData","questions","setQuestions","queryText","setQueryText","rawText","setRawText","handleFileChange","e","target","files","handleUpload","formData","FormData","append","response","post","data","plainText","questionsArray","split","filter","line","error","console","handleQuery","queryResult","handleQueryTextChange","value","handleRawTextChange","className","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","placeholder","map","question","index","_c","$RefreshReg$"],"sources":["C:/Users/SHAIK JAVED/OneDrive/Desktop/Miniproject/questgen/src/components/UploadPage.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport './upload.css';\r\n\r\n// Function to strip Markdown formatting and convert to plain text\r\nconst stripMarkdown = (markdown) => {\r\n    return markdown\r\n        .replace(/(\\*\\*|__)(.*?)\\1/g, '$2') // Bold\r\n        .replace(/(\\*|_)(.*?)\\1/g, '$2') // Italic\r\n        .replace(/~~(.*?)~~/g, '$1') // Strikethrough\r\n        .replace(/!\\[[^\\]]*\\]\\([^)]*\\)/g, '') // Remove images\r\n        .replace(/\\[[^\\]]*\\]\\([^)]*\\)/g, '') // Remove links\r\n        .replace(/^\\s*#\\s*(.*)$/gm, '$1') // Remove headings\r\n        .replace(/^\\s*>\\s*(.*)$/gm, '$1') // Remove blockquotes\r\n        .replace(/`([^`]*)`/g, '$1') // Inline code\r\n        .replace(/^\\s*[-+*]\\s+/gm, '') // Remove unordered list bullets\r\n        .replace(/^\\s*\\d+\\.\\s+/gm, '') // Remove ordered list numbers\r\n        .replace(/\\n{2,}/g, '\\n') // Remove extra line breaks\r\n        .trim(); // Trim any extra spaces\r\n};\r\n\r\nconst UploadPage = () => {\r\n    const [file, setFile] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [extractedData, setExtractedData] = useState('');\r\n    const [questions, setQuestions] = useState([]);\r\n    const [queryText, setQueryText] = useState('');\r\n    const [rawText, setRawText] = useState('');\r\n\r\n    const handleFileChange = (e) => {\r\n        setFile(e.target.files[0]);\r\n    };\r\n\r\n    const handleUpload = async () => {\r\n        if (!file) return;\r\n\r\n        setLoading(true);\r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n        formData.append('queryText', queryText);\r\n\r\n        try {\r\n            const response = await axios.post('http://localhost:3322/upload', formData);\r\n            setExtractedData(response.data.extractedData);\r\n\r\n            // Convert Markdown to plain text and split into an array\r\n            const plainText = stripMarkdown(response.data.questions);\r\n            const questionsArray = plainText.split('\\n').filter(line => line.trim() !== ''); // Filter out any empty lines\r\n            setQuestions(questionsArray); // Store as an array of strings\r\n        } catch (error) {\r\n            console.error('Error uploading file:', error);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleQuery = async () => {\r\n        if (!rawText) return;\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await axios.post('http://localhost:3322/query', { rawText, queryText });\r\n            setExtractedData(rawText); // Set rawText as extractedData\r\n\r\n            // Convert Markdown to plain text and split into an array\r\n            const plainText = stripMarkdown(response.data.queryResult);\r\n            const questionsArray = plainText.split('\\n').filter(line => line.trim() !== ''); // Filter out any empty lines\r\n            setQuestions(questionsArray); // Store as an array of strings\r\n        } catch (error) {\r\n            console.error('Error querying text:', error);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleQueryTextChange = (e) => {\r\n        setQueryText(e.target.value);\r\n    };\r\n\r\n    const handleRawTextChange = (e) => {\r\n        setRawText(e.target.value);\r\n    };\r\n\r\n    return (\r\n        <div className=\"upload-page-container\">\r\n            <div className=\"upload-form-container\">\r\n                <input type=\"file\" onChange={handleFileChange} className=\"upload-input\" />\r\n                <button onClick={handleUpload} className=\"upload-button\" disabled={loading}>\r\n                    {loading ? 'Uploading...' : 'Upload'}\r\n                </button>\r\n                <input\r\n                    type=\"text\"\r\n                    value={queryText}\r\n                    onChange={handleQueryTextChange}\r\n                    placeholder=\"Enter prompt for Gemini AI\"\r\n                    className=\"upload-query-input\"\r\n                />\r\n                <textarea\r\n                    value={rawText}\r\n                    onChange={handleRawTextChange}\r\n                    placeholder=\"Enter raw text to query\"\r\n                    className=\"upload-raw-text-input\"\r\n                />\r\n                <button onClick={handleQuery} className=\"upload-button\" disabled={loading}>\r\n                    {loading ? 'Querying...' : 'Get Query'}\r\n                </button>\r\n            </div>\r\n            <div className=\"upload-preview-container\">\r\n                <div className=\"upload-generated-results\">\r\n                    <h3>Extracted Data:</h3>\r\n                    <pre>{extractedData}</pre>\r\n                    <h3>Generated Questions:</h3>\r\n                    <ul>\r\n                        {questions.map((question, index) => (\r\n                            <li key={index}>{question}</li> // Display each question as a list item\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UploadPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}