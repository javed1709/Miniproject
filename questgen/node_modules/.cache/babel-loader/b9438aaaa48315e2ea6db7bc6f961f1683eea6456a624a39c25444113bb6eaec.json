{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SHAIK JAVED\\\\OneDrive\\\\Desktop\\\\Miniproject\\\\questgen\\\\src\\\\components\\\\UploadPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './upload.css'; // Import the specific CSS file for UploadPage\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UploadPage = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [uploadLoading, setUploadLoading] = useState(false); // Separate loading state for upload\n  const [queryLoading, setQueryLoading] = useState(false); // Separate loading state for query\n  // const [extractedData, setExtractedData] = useState('');\n  // const [questions, setQuestions] = useState('');\n  const [queryText, setQueryText] = useState('');\n  const [rawText, setRawText] = useState('');\n  const handleFileChange = e => {\n    setFile(e.target.files[0]);\n  };\n  const handleUpload = async () => {\n    if (!file) return;\n    setUploadLoading(true);\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('queryText', queryText);\n    try {\n      const response = await axios.post('http://localhost:3322/upload', formData);\n      // setExtractedData(response.data.extractedData);\n      // setQuestions(response.data.questions);\n    } catch (error) {\n      console.error('Error uploading file:', error);\n    } finally {\n      setUploadLoading(false);\n    }\n  };\n  const handleQuery = async () => {\n    if (!rawText) return;\n    setQueryLoading(true);\n    try {\n      const response = await axios.post('http://localhost:3322/query', {\n        rawText,\n        queryText\n      });\n      // setExtractedData(rawText); // Set rawText as extractedData\n      // setQuestions(response.data.queryResult); // Set queryResult as questions\n    } catch (error) {\n      console.error('Error querying text:', error);\n    } finally {\n      setQueryLoading(false);\n    }\n  };\n  const handleQueryTextChange = e => {\n    setQueryText(e.target.value);\n  };\n  const handleRawTextChange = e => {\n    setRawText(e.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"upload-page-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload-form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange,\n        className: \"upload-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpload,\n        className: \"upload-button\",\n        disabled: uploadLoading,\n        children: uploadLoading ? 'Uploading...' : 'Upload'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: queryText,\n        onChange: handleQueryTextChange,\n        placeholder: \"Enter prompt for Gemini AI\",\n        className: \"upload-query-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: rawText,\n        onChange: handleRawTextChange,\n        placeholder: \"Enter raw text to query\",\n        className: \"upload-raw-text-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleQuery,\n        className: \"upload-button\",\n        disabled: queryLoading,\n        children: queryLoading ? 'Querying...' : 'Get Query'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n_s(UploadPage, \"FfjZYfR80NWwfxijS4W+/EG0N/A=\");\n_c = UploadPage;\nexport default UploadPage;\nvar _c;\n$RefreshReg$(_c, \"UploadPage\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","UploadPage","_s","file","setFile","uploadLoading","setUploadLoading","queryLoading","setQueryLoading","queryText","setQueryText","rawText","setRawText","handleFileChange","e","target","files","handleUpload","formData","FormData","append","response","post","error","console","handleQuery","handleQueryTextChange","value","handleRawTextChange","className","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/SHAIK JAVED/OneDrive/Desktop/Miniproject/questgen/src/components/UploadPage.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport './upload.css'; // Import the specific CSS file for UploadPage\r\n\r\nconst UploadPage = () => {\r\n    const [file, setFile] = useState(null);\r\n    const [uploadLoading, setUploadLoading] = useState(false); // Separate loading state for upload\r\n    const [queryLoading, setQueryLoading] = useState(false); // Separate loading state for query\r\n    // const [extractedData, setExtractedData] = useState('');\r\n    // const [questions, setQuestions] = useState('');\r\n    const [queryText, setQueryText] = useState('');\r\n    const [rawText, setRawText] = useState('');\r\n\r\n    const handleFileChange = (e) => {\r\n        setFile(e.target.files[0]);\r\n    };\r\n\r\n    const handleUpload = async () => {\r\n        if (!file) return;\r\n\r\n        setUploadLoading(true);\r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n        formData.append('queryText', queryText);\r\n\r\n        try {\r\n            const response = await axios.post('http://localhost:3322/upload', formData);\r\n            // setExtractedData(response.data.extractedData);\r\n            // setQuestions(response.data.questions);\r\n        } catch (error) {\r\n            console.error('Error uploading file:', error);\r\n        } finally {\r\n            setUploadLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleQuery = async () => {\r\n        if (!rawText) return;\r\n\r\n        setQueryLoading(true);\r\n\r\n        try {\r\n            const response = await axios.post('http://localhost:3322/query', { rawText, queryText });\r\n            // setExtractedData(rawText); // Set rawText as extractedData\r\n            // setQuestions(response.data.queryResult); // Set queryResult as questions\r\n        } catch (error) {\r\n            console.error('Error querying text:', error);\r\n        } finally {\r\n            setQueryLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleQueryTextChange = (e) => {\r\n        setQueryText(e.target.value);\r\n    };\r\n\r\n    const handleRawTextChange = (e) => {\r\n        setRawText(e.target.value);\r\n    };\r\n\r\n    return (\r\n        <div className=\"upload-page-container\">\r\n            <div className=\"upload-form-container\">\r\n                <input type=\"file\" onChange={handleFileChange} className=\"upload-input\" />\r\n                <button onClick={handleUpload} className=\"upload-button\" disabled={uploadLoading}>\r\n                    {uploadLoading ? 'Uploading...' : 'Upload'}\r\n                </button>\r\n                <input\r\n                    type=\"text\"\r\n                    value={queryText}\r\n                    onChange={handleQueryTextChange}\r\n                    placeholder=\"Enter prompt for Gemini AI\"\r\n                    className=\"upload-query-input\"\r\n                />\r\n                <textarea\r\n                    value={rawText}\r\n                    onChange={handleRawTextChange}\r\n                    placeholder=\"Enter raw text to query\"\r\n                    className=\"upload-raw-text-input\"\r\n                />\r\n                <button onClick={handleQuery} className=\"upload-button\" disabled={queryLoading}>\r\n                    {queryLoading ? 'Querying...' : 'Get Query'}\r\n                </button>\r\n            </div>\r\n            {/* <div className=\"upload-preview-container\">\r\n                <div className=\"upload-generated-results\">\r\n                    <h3>Extracted Data:</h3>\r\n                    <pre>{extractedData}</pre>\r\n                    <h3>Generated Questions:</h3>\r\n                    <pre>{questions}</pre>\r\n                </div>\r\n            </div> */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UploadPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}